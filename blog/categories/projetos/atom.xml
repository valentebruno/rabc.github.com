<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: projetos | Ricardo Borelli]]></title>
  <link href="http://rabc.fences.com.br/blog/categories/projetos/atom.xml" rel="self"/>
  <link href="http://rabc.fences.com.br/"/>
  <updated>2013-01-13T14:07:28-02:00</updated>
  <id>http://rabc.fences.com.br/</id>
  <author>
    <name><![CDATA[Ricardo Borelli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Projetos são pessoas. Pessoas não são diagramas.]]></title>
    <link href="http://rabc.fences.com.br/2012/04/30/projetos-sao-pessoas-pessoas-nao-sao-diagramas/"/>
    <updated>2012-04-30T21:38:00-03:00</updated>
    <id>http://rabc.fences.com.br/2012/04/30/projetos-sao-pessoas-pessoas-nao-sao-diagramas</id>
    <content type="html"><![CDATA[<blockquote><p>Lazy kids.</p>

<p>Whatever happened to hard work?</p>

<p><a href="http://www.joelonsoftware.com/articles/ThePerilsofJavaSchools.html">Joel Spolsky</a></p></blockquote>

<p>Durante anos as pessoas tem estudado a melhor maneira de se fazer um projeto. E, invariavelmente, sempre chegam a conclusão de um novo
e revolucionário diagrama, onde o mundo é perfeito e tudo vai sair nos conformes. Pessoas, kd//</p>

<p>Sempre estive em um mundo onde os projetos sempre davam certos no final, apesar de chegarem na metade já errados. Aí comecei a pós-graduação
e descobri que os problemas em um mundo mais corporativo eram exatamente os mesmos! Projetos são considerados importantes, as pessoas não.</p>

<!--more-->


<h2>Programação é programação. Não importa aonde nem como.</h2>

<p><a href="http://en.wikipedia.org/wiki/Project_Management_Institute">PMI</a>. <a href="http://en.wikipedia.org/wiki/COCOMO">Cocomo</a>. <a href="http://en.wikipedia.org/wiki/Agile_software_development">Agile</a>.
Chame como quiser, um projeto no final das contas continua sendo um projeto. O que vai fazer a diferença é como o ser humano responsável por ele
irá tratar de como as coisas podem e devem ser feitas.</p>

<p>Se você, programador, não está preparado para dizer 'não' ou para aceitar a mudança, está fazendo errado. Sim, um não exclui o outro. Sim, você
<strong>tem</strong> que estar preparado para os dois. Seus projetos sempre estarão no limite da entrega, no meio do caminho sempre haverá aquela pedra
onde você irá tropeçar e perder tempo voltando ao lugar.</p>

<h2>Suas ferramentas são suas. Seus métodos são seus.</h2>

<p>"Prometo que no próximo projeto vou seguir os 12 passos do <a href="http://www.joelonsoftware.com/articles/fog0000000043.html">Joel Test</a>!".
<strong>Ninguém se importa!</strong> De fato, o único que deveria se importar com isso é você, programador.</p>

<p>Se você vai seguir TDD, entrega incremental ou utilizar o controle de versão mais moderno de todos, pouco importa para quem não está ali
sentado digitando código. Para eles, o que importa é a entrega final. É seu dever manter <a href="http://www.readwrites.com/post/14264667861/code-quality">suas ferramentas afiadas</a>
e saber o que exatamente esperam que o projeto faça. O resto é apenas um escudo, contra você mesmo e contra fatores externos.</p>

<h2>Cuida de pessoas no lugar de gerenciar projetos.</h2>

<p>Admita: você erra, afinal é humano. Aquele código feio e mal-escrito ficará lá pois você acha que vai voltar nele depois mas nunca mais volta.
"Ship first, ask later" só funciona quando você sabe o que está fazendo, e isso só é possível quando você sabe o que está fazendo.</p>

<p>Todo programador passa pela fase de tentar várias soluções ao mesmo tempo até uma dar certo (tipo criança batendo a cabeça na parede). Se você
é assim, sua opção é encher o saco de quem está ao seu lado. Se você lidera uma equipe, sua função é identificar esse tipo de comportamento
e ajudar.</p>

<p>Um projeto pode até dar errado, mas as pessoas sempre dão certo.</p>
]]></content>
  </entry>
  
</feed>
