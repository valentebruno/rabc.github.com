<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ricardo Borelli]]></title>
  <link href="http://rabc.github.com/atom.xml" rel="self"/>
  <link href="http://rabc.github.com/"/>
  <updated>2012-04-09T21:44:37-03:00</updated>
  <id>http://rabc.github.com/</id>
  <author>
    <name><![CDATA[Ricardo Borelli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A arquitetura de $1 bilhão (ou por que não se vive somente do número de usuários)]]></title>
    <link href="http://rabc.github.com/2012/04/09/a-arquitetura-de-bilhao-ou-por-que-nao-se-vive-somente-do-numero-de-usuarios/"/>
    <updated>2012-04-09T20:55:00-03:00</updated>
    <id>http://rabc.github.com/2012/04/09/a-arquitetura-de-bilhao-ou-por-que-nao-se-vive-somente-do-numero-de-usuarios</id>
    <content type="html"><![CDATA[<p>Ultimamente, todas as métricas sobre uma startup falam do seu número de usuários. Claro que com a compra Instagram não poderia ser diferente.
Mas existe, sim, algo além disso que poucos falam: a arquitetura do sistema.</p>

<p>A arquitetura do Facebook é tosca, como sempre foi e será por um bom tempo. Um destino <a href="http://gigaom.com/cloud/facebook-trapped-in-mysql-fate-worse-than-death/">pior que a morte</a>,
mesmo com as constantes inovações, como o <a href="http://cassandra.apache.org/">Cassandra</a> e o <a href="https://github.com/facebook/hiphop-php">HipHop</a>. 90%
dos sistemas feitos são os famosos <a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a>, então quando um sistema deixa
de ser somente isso, fica difícil pensar como fazer sem deixar gargalos.</p>

<!--more-->


<h2>O milagre da multiplicação dos usuários</h2>

<div class='embed tweet'><blockquote class="twitter-tweet tw-align-center" lang="pt"><p>It took AOL 9 years to hit 1 million users. Facebook 9 months. Draw Something 9 days.</p>&mdash; Shane Mac (@ShaneMac) <a href="https://twitter.com/ShaneMac/status/182559236763553792" data-datetime="2012-03-21T20:08:08+00:00">março 21, 2012</a></blockquote>
<script src="http://rabc.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p></p>

<p>A matemática é simples: quanto mais usuários, mais gente consumindo os anúncios. Não somente o Facebook, mas todos dependem de você: Google,
boo-box e tantos outros. Nesse cenário fica mais fácil se apegarem somente a métricas de quanto cada usuário vale para a startup.</p>

<p>Só que essa métrica não é nada sem que esses milhares de usuários tenham uma boa experiência no uso da plataforma. As pessoas não utilizam
o Instagram apenas por causa de seus filtros, elas utilizam por que ele é rápido, confiável e fácil. E isso não se consegue do dia para a noite.</p>

<h2>A engenharia e arquitetura do sistema é tudo</h2>

<p>Vejamos a arquitetura do Instagram:</p>

<blockquote><ul>
<li>Gunicorn as their WSGI server. Apache harder to configure and more CPU intensive.</li>
<li>Fabric is used to execute commands in parallel on all machines. A deploy takes only seconds.</li>
<li>PostgreSQL (users, photo metadata, tags, etc) runs on 12 Quadruple Extra-Large memory instances.</li>
<li>Pgbouncer is used pool connections to PostgreSQL.</li>
<li>Redis powers their main feed, activity feed, sessions system, and other services.</li>
</ul>


<p>Fonte: <a href="http://highscalability.com/blog/2012/4/9/the-instagram-architecture-facebook-bought-for-a-cool-billio.html">High Scalability</a></p></blockquote>

<p>Pois é. Tudo tecnologia de ponta (<em>cutting edge tech</em>, como eles gostam de chamar) que o Facebook não utiliza pois o sistema deles não foi
feito com isso em mente e implementar tudo isso agora, a beira de um IPO, seria caro demais. Solução? <em>Acqui-hire</em>.</p>

<p>Comprando o Instagram, o Facebook leva todo esse sistema e, de brinde, a equipe de 16 pessoas que conseguiu construir tudo isso do zero. É o tipo
de situação win-win: investidores, fundadores e funcionários do Instagram conseguem um bom dinheiro, Facebook consegue uma equipe já experiente
com o tipo de tecnologia que eles mais precisam.</p>

<h2>A mágica acontece por trás</h2>

<p>Vivemos em uma indústria onde tudo isso muda rapidamente. A arquitetura do Facebook é tosca por que isso fazia sentido quando ele foi feito. Hoje,
o Facebook não tem mais fôlego nem tamanho para sair testando e batendo cabeça com essas novas tecnologias como uma equipe de 16 pessoas consegue.</p>

<p>Desenvolvedores são as pessoas que ficam por trás da cortina, por isso mesmo que eles são os mais importantes. Sem conhecer o que há
de mais novo, você estará sempre para trás na corrida pela inovação.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Caos.]]></title>
    <link href="http://rabc.github.com/2012/04/02/caos/"/>
    <updated>2012-04-02T20:48:00-03:00</updated>
    <id>http://rabc.github.com/2012/04/02/caos</id>
    <content type="html"><![CDATA[<blockquote><p>“Introduce a little anarchy, upset the established order, and everything becomes chaos, I’m an agent of chaos,
and you know the thing about chaos? It’s fair.”</p>

<p><strong>Joker</strong></p></blockquote>

<p>Existem várias <em>buzzwords</em> para descrever organização: simplicidade, minimalismo, Getting Things Done. Todas partem do princípio de que
tudo tem que estar em seu devido lugar, nada pode ser desorganizado. Por que?</p>

<p>Essas buzzwords se vendem com o mesmo ideal: algo para ajudar a se concentrar no que realmente é importante, já que tudo estará classificado
e organizado, como livros em uma estante. Flash News: você não tem controle sobre o Universo.</p>

<!--more-->


<h2>Rotina é um saco</h2>

<p>Já tentei me forçar a um processo diário, mas cedo ou tarde eu sempre me irritava em seguir as regras e em classificar tudo. Percebi que
quanto mais eu tentava organizar o mundo a minha volta, mais eu me perdia dentro dele.</p>

<p>Organização parte do princípio de que as coisas serão previsíveis, mas o problema nisso é que, quanto mais previsível, maior a sua chance
de não ter espaço para sair disso quando surgir algo fora dessa organização.
<a href="http://articles.latimes.com/1992-02-23/business/fi-5118_1_borland-international-chairman-philippe-kahn">Bárbaros tinham uma disciplina maior</a>
do que os Europeus justamente por não tentarem organizar cada pedaço do mundo ao seu redor e por trabalharem em unidades menores.</p>

<p>A minha <a href="http://rabc.github.com/2012/01/13/wikifique-se-e-recupere-sua-sanidade/">wiki</a> não é uma tentativa de controlar meu cérebro, mas sim
uma maneira mais visual do caos em que meus conhecimentos existem.</p>

<h2>Processo te deixa conformado</h2>

<blockquote><p>Men must want to do things out of their own innermost drives. People, not commercial organizations or chains of command, are what makes
great civilizations work. Every civilization depends upon the quality of the individuals it produces. If you over-organize humans,
over-legalize them, suppress their urge to greatness—they cannot work and their civilization collapses.</p>

<p><strong>Frank Herbert in &#8220;A letter to CHOAM Attributed to The Preacher&#8221; in Children of Dune</strong></p></blockquote>

<p>Seguir um processo significa seguir o seu passo-a-passo. Isso também significa que você não vai aprender nada, já que sempre dependerá de
algo te dizendo o que fazer.</p>

<p>Resistir a um <a href="http://teddziuba.com/2011/12/process.html">processo</a> não significa sempre fazer as coisas do jeito errado. Significa aprender
com os erros. Fail more to fail better.</p>

<p>Eu continuo cometendo os mesmos erros de 5 anos atrás, a diferença é que quando tentava seguir um processo eu nunca sabia por que as coisas
davam errado. Agora sei por que estou errando.</p>

<p>Outro perigo de seguir um processo é você forçar as pessoas a sua volta a entrarem dentro desse seu mundo apenas porque você não quer correr
o risco de sentir desorganizado.</p>

<h2>Caos te deixa preparado para o inesperado</h2>

<div style="text-align:center;">
    <a href="http://rabc.github.com/images/chaos.jpg"><img src="http://rabc.github.com/images/chaos.jpg" width="300" height="218"></a>
    <br />
    <p style="font-size:14px;">Fonte: <a href="http://www.reddit.com/tb/qzhoz">http://www.reddit.com/tb/qzhoz</a></p>
</div>


<p>Caos não é previsível, caos é o que vai <a href="http://lifehacker.com/5881054/order-is-never-observed-it-is-disorder-that-attracts-attention-because-it-is-awkward-and-intrusive">chamar sua atenção</a>
quando algo realmente precisar dela. Quando algo não pode ser controlado com sua organização e o seu processo tradicionais, o que você faz?
Sai correndo com a mão na cabeça?</p>

<p>Fazer o seu mundo ser caótico faz com que você regule mais o seu modo de agir, pois sabe que não terá um passo-a-passo para seguir caso
algo dê errado. Isso sim leva a uma organização melhor, já que você saberá o que fazer para que o caos não saia de controle.</p>

<p>Faça um pouco do seu mundo ser caótico e se torne um pouco menos conformista.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Privacidade Mobile]]></title>
    <link href="http://rabc.github.com/2012/02/09/privacidade-mobile/"/>
    <updated>2012-02-09T21:22:00-02:00</updated>
    <id>http://rabc.github.com/2012/02/09/privacidade-mobile</id>
    <content type="html"><![CDATA[<p>Privacidade. Essa palavrinha que faz mágica quando se quer criar histerias coletivas.</p>

<p>Minha opinião sobre isso é a seguinte: quer privacidade? Então saia do Foursquare e pare de postar suas fotos no Instagram e no Facebook, pois
privacidade na internet é uma questão de escolha pessoal - em alguns casos como o <a href="https://www.path.com/">Path</a> mostrou.</p>

<p>Path se vende como uma &#8220;rede social privada&#8221;: você compartilha seus momentos com as pessoas mais próximas. Essa semana, um desenvolvedor
<a href="http://mclov.in/2012/02/08/path-uploads-your-entire-address-book-to-their-servers.html">descobriu</a> que o aplicativo deles enviava para um servidor
<strong>toda</strong> a sua lista de contatos do iPhone sem pedir autorização.</p>

<!-- more -->


<h2>A decisão errada: A API é fácil e está ali para ser utilizada</h2>

<p>Na web o usuário sempre foi tratado de forma <em>ativa</em>. Porém, em dispositivos móveis muitas vezes o usuário faz o papel de agente <em>passivo</em>, pois
é algo pequeno e com o qual as pessoas não querem ter muito trabalho ao utilizar (ao contrário do paradigma de se utilizar um computador). Então
por que continuamos programando como se o usuário não carregasse informações importantes?</p>

<p>Qualquer um que utilize o iPhone sabe que existem dois pedidos básicos de informação que ele faz para cada aplicativo, quando necessário:
se você autoriza o aplicativo a utilizar sua localização e se você autoriza receber notificações (<em>Push</em>).</p>

<p>Porém, a API da lista de contatos não pede autorização e alguns desenvolvedores que
<a href="http://dcurt.is/stealing-your-address-book">é aceitável utilizar essa informação</a> sem a permissão do usuário. Mais errado do que esse
pensamento, só jogar a culpa na Apple.</p>

<h2>Don&#8217;t shoot the messenger</h2>

<p>Imagine ser bombardeado por pedidos de autorização cada vez que o aplicativo resolve acessar alguma informação do usuário.</p>

<p>A Apple não faz isso pois ela conta com um item que todo desenvolvedor e empreendedor deve ter: ética. O Path mostrou isso no
<a href="http://blog.path.com/post/17274932484/we-are-sorry">pedido de desculpas</a> ao dizer que todos os dados seriam apagados.</p>

<p>Muitas vezes o maior desafio não é desenvolver um sistema, prevendo sua alta disponibilidade e outras <em>buzzwords</em>. O maior desafio
pode ser fazer o seu usuário confiar em você, sabendo que os dados dele serão tratados como algo sagrado e inviolável.</p>

<h2>Privacidade, mesmo quando autorizado o uso da informação</h2>

<p>Certa vez, comecei um aplicativo em que seria necessário requisitar a geolocalização do usuário e enviar essa informação para um servidor.
Minha preocupação desde o início era: como vou guardar essas informações sem que elas sejam relacionados diretamente a alguém?</p>

<p>A solução que encontrei foi guardar separadamente a localização sem que ela estivesse relacionada diretamente com qualquer outra coisa
dentro do sistema. Assim garanto que ela não seria de fácil manipulação e ao mesmo tempo consigo os dados que o meu sistema precisaria.</p>

<p>Seja transparante. Só pegue os dados que realmente precisar. Criptografe. Identifique de uma maneira que somente o seu sistema entenda.
<a href="http://blog.securemacprogramming.com/2012/02/on-privacy-hashing-and-your-customers/">Crie um hash</a> das informações.</p>

<p>São esses tipos de detalhes que fazem a diferença. Confiança é a melhor moeda de troca com a pessoa que vai utilizar seu sistema.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wikifique-se e recupere sua sanidade]]></title>
    <link href="http://rabc.github.com/2012/01/13/wikifique-se-e-recupere-sua-sanidade/"/>
    <updated>2012-01-13T20:33:00-02:00</updated>
    <id>http://rabc.github.com/2012/01/13/wikifique-se-e-recupere-sua-sanidade</id>
    <content type="html"><![CDATA[<p>(apesar desse post falar em alguns termos técnicos, recomendo continuar a leitura mesmo que você não seja programador)</p>

<p>Sempre fui um <em>migrante tecnológico</em>: de programação desktop para web e para mobile, de Windows para Linux e para Mac OS X (é impossível
ser programador sem conhecer Unix, mas isso é assunto para outro post), de Java para PHP e para JavaScript, de C# para Objective-C e para Python.</p>

<p>Como todo bom programador teimoso, sempre insisti no &#8220;meu cérebro guarda tudo!&#8221; (talvez por isso que minhas mesas sempre foram desorganizadas,
mas divago), até que descobri que não, eu não lembrava de tudo na hora em que precisava. Aí achei
<a href="http://eriwen.com/tools/wikify-yourself/">esse post</a> que me mostrou a salvação: criar uma Wiki pessoal.</p>

<!-- more -->


<h2>Mas tudo o que preciso o Google e StackOverflow encontram, não?</h2>

<p>Não de um jeito que o seu cérebro reconheça facilmente e não faça você perder alguns minutos procurando, lendo e tentando entender. A internet
é um excelente repositório de dados mas é péssima em informações.</p>

<p>Uma Wiki pessoal pode ser acessada de qualquer máquina e organizada da maneira que você, e somente você, entenderá com as informações relevantes
e recorrentes. A Wiki não é um depósito indiscriminado de links ou textos, e sim um lugar onde você pode guardar o tipo de informação que
sempre vai precisar ter a mão: informações dos seus projetos, referências das linguagens e softwares que você utiliza, sua agenda, servidores
e sites que você utiliza.</p>

<div style="text-align:center;">
<img src="http://rabc.github.com/images/post_wiki/markdown_wiki.png" width="400" height="223">
<br />
<p style="font-size:14px;">Minha referência de Markdown enquanto escrevo esse post</p>
</div>


<h2>Uma Wiki que não precisa ser instalada em um servidor</h2>

<p>O <a href="http://www.tiddlywiki.com/">Tiddlywiki</a> é uma engine feita em Java que roda diretamente no browser e que guarda tudo em um banco de dados interno.
Tiddlywiki e Dropbox formam a dupla perfeita: fácil de guardar e de ser acessado de qualquer lugar.</p>

<p>Eu aceitei a sugestão do post que citei lá em cima e utilizo o <a href="http://www.dcubed.ca/Welcome_to_d-cubed.html">d-cubed</a>, que é um Tiddlywiki
pré-configurado.</p>

<h2>Saiba o que guardar</h2>

<p>Referências rápidas, estruturado de uma forma que você reconheça rapidamente. Se a Wiki será minimalista ou expansiva é uma decisão sua,
desde que você se encontre nela.</p>

<div style="text-align:center;">
<img src="http://rabc.github.com/images/post_wiki/sidebar.png" width="400" height="398">
<br />
<p style="font-size:14px;">Isso é o que a minha Wiki tem atualmente</p>
</div>


<p>O d-cubed já vem com uma boa estrutura para separar os tipos de informações. Essa estrutura pode parecer complicada no começo (e, acredite,
você ficará perdido até entender), mas tudo dentro dele se conecta de uma forma fácil de ser administrada.</p>

<h2>Sua sanidade de volta</h2>

<p>Construir uma Wiki não é somente um exercício de organização e escrita. É também uma forma de entender melhor como alguma coisa funciona ao criar
um novo item, uma forma de ter uma visão geral do seu projeto e de ter informações sempre a mão.</p>

<p>Produtividade e organização viram apenas palavras quando suas informações são apenas dados.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Tech Talk SP 2012]]></title>
    <link href="http://rabc.github.com/2012/01/12/ios-tech-talk-sp-2012/"/>
    <updated>2012-01-12T20:00:00-02:00</updated>
    <id>http://rabc.github.com/2012/01/12/ios-tech-talk-sp-2012</id>
    <content type="html"><![CDATA[<p>Dia 09/01/2012 rolou o iOS Tech Talk em São Paulo e fiz um post sobre o evento para o blog da Maya:
<a href="http://labs.maya.im/2012/01/ios-5-tech-talk-world-tour-a-primeira-edicao-em-sao-paulo/">http://labs.maya.im/2012/01/ios-5-tech-talk-world-tour-a-primeira-edicao-em-sao-paulo/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sobre o SOPA (ou por que esse tipo de lei deveria causar mais medo em você)]]></title>
    <link href="http://rabc.github.com/2011/12/29/sobre-o-sopa-ou-por-que-esse-tipo-de-lei-deveria-causar-mais-medo-em-voce/"/>
    <updated>2011-12-29T19:18:00-02:00</updated>
    <id>http://rabc.github.com/2011/12/29/sobre-o-sopa-ou-por-que-esse-tipo-de-lei-deveria-causar-mais-medo-em-voce</id>
    <content type="html"><![CDATA[<p>Americanos adoram criar siglas para suas leis: DMCA, ACTA, COICA. E a lei do momento atende pelo nome de SOPA.</p>

<p><strong>tl;dr</strong> SOPA é uma lei em que uma mera <em>acusação</em> já pode fazer com que o seu conteúdo online seja abatido, destruído e esquartejado. Ah, não
somente o seu conteúdo, mas <strong>você</strong> também. O <a href="http://www.gemind.com.br/5746/empresa-tecnologia-contra-sopa-eua/">Gemind</a> e o
<a href="http://www.reddit.com/r/explainlikeimfive/comments/meh0k/eli5_sopa/c30cyoy">Reddit</a> explicam em detalhes.</p>

<!-- more -->


<h2>Tá, mas o que isso tem a ver comigo que moro em outro hemisfério?</h2>

<p><strong>Tudo.</strong></p>

<p>Praticamente tudo o que você faz na internet está, de uma maneira ou outra, hospedada nos EUA. Se você tem um site com domínio internacional,
provavelmente registrou utilizando o GoDaddy (guarde esse nome).</p>

<p>Colocou no YouTube aquele vídeo do seu sobrinho dançando Lady Gaga? SOPA vai fazer com que o vídeo seja removido.</p>

<p>Hospedou seu blog no Github e escreveu contra alguma empresa americana? SOPA vai abater a bala o seu blog.</p>

<h2>O fiasco do GoDaddy</h2>

<p>Um dos principais pontos do SOPA é que poderá ser requisitado que os provedores de DNS <em>tirem</em> o site do ar. É como se a empresa que vende
água engarrafada fechasse o registro geral de água da sua casa.</p>

<p>Aí um certo dia descobriu-se que o GoDaddy apoia/apoiava o SOPA. O maior provedor de domínios sendo a favor do SOPA significa que esse processo
de tirar arbitrariamente um site do ar ficará mais fácil (e que eles concordam em tirar do ar seus próprios clientes!).</p>

<p>Resultado: <a href="http://www.reddit.com/r/politics/comments/nmnie/godaddy_supports_sopa_im_transferring_51_domains/">milhares</a> de pessoas e
<a href="https://twitter.com/#!/jimmy_wales/status/150287579642740736">sites importantes</a> resolveram tirar seus domínios do GoDaddy e ir para
outros provedores. Alguns desses provedores, como o <a href="http://www.namecheap.com/">NameCheap</a>, souberam aproveitar essa raiva contra o GoDaddy
e se posicionaram <strong>contra</strong> o SOPA. (<strong>update:</strong> o Namecheap deu até um <a href="https://www.facebook.com/NameCheap/posts/10150443018538282">cupom de desconto</a>
para quem transferir o domínio)</p>

<p>Primeiro, o GoDaddy <a href="http://www.gemind.com.br/8333/go-daddy-sopa/">falou que isso não teve impacto</a> nos negócios deles. Depois, entrou em modo
<a href="https://plus.google.com/111996409013825587891/posts/7AMw7gDQ7Bi">&#8220;Nós gostamos dos nossos clientes!&#8221;</a> (a.k.a. desespero).</p>

<p>Até que resolveram <a href="http://www.gemind.com.br/8368/go-daddy-volta-atras-apoio-sopa/">tirar o apoio</a> a lei. Você acreditou nessa história?
<a href="http://www.reddit.com/r/technology/comments/npair/godaddy_has_not_withdrawn_its_official/">Pois é&#8230;</a></p>

<h2>Moral da história: o mundo não é mais pequeno</h2>

<p>As principais vozes contra o SOPA são empreendedores americanos (gente grande como Paul Graham e Alexis Ohanian), pois eles sabem como isso
vai afetar o negócio deles. E o negócio deles somos todos nós que acessamos a internet todos os dias.</p>

<p>Por isso, chamo a todos que estão lendo isso e que possuem domínios registrados pelo GoDaddy (startups brasileiras ou simples individuais)
a pesquisarem mais sobre o assunto e se posicionarem.</p>

<p>O planeta pode até ser grande, mas a internet fez o mundo ficar pequeno. Para melhor.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lição #1: Esqueça tudo o que você sabe]]></title>
    <link href="http://rabc.github.com/2011/12/04/licao-1-esqueca-tudo-o-que-voce-sabe/"/>
    <updated>2011-12-04T22:50:00-02:00</updated>
    <id>http://rabc.github.com/2011/12/04/licao-1-esqueca-tudo-o-que-voce-sabe</id>
    <content type="html"><![CDATA[<p>Aprender um novo idioma é difícil. Você se sente como uma criança de 5 anos tentando repetir (sem sucesso) o alfabeto, enquanto procura sentido
e algum padrão no que está falando. Até que você percebe que existem palavras e estrutura parecidas, mas completamente diferente, e desiste
de tentar relacionar o novo idioma com o seu idioma nativo.</p>

<p>Concorda? Agora, me explique: por que não fazer o mesmo ao aprender uma nova linguagem de programação?</p>

<!-- more -->


<h2>Linguagens diferentes exigem padrões diferentes</h2>

<p><a href="http://en.wikipedia.org/wiki/Software_design_pattern">Design Patterns</a> é o que não falta. Cada um foi concebido com alguma linguagem em mente
(exceto quando autores utilizam pseudo-código, mas divago), utilizando seus padrões já pré-estabelecidos.</p>

<p>O que vejo muito é que alguns programadores tentam fazer um <em>port</em> de sua linguagem preferida ao aprender uma nova linguagem. Com isso, tentam
emular o mesmo ambiente que tinham antes e ganhar tempo no aprendizado. <em>Isso está completamente errado.</em></p>

<p>Pode até funcionar no começo, mas se prepare para as consequências futuras quando o seu software começar a dar problema pelo fato de a linguagem
não ter suportado tão bem a estrutura que você criou.</p>

<div style="text-align:center;">
<img src="http://i.imgur.com/QV88c.jpg" width="400" height="317">
<br />
<p style="font-size:14px;">Quem nunca passou por isso?</p>
</div>


<p>Um DTO que funciona muito bem em Java pode (e vai) dar muitos problemas no seu projeto em Objective-C. A validação <em>server-side</em> única e automática
que existe no .NET vai te dar muito trabalho para imitar em PHP.</p>

<h2>Lição #2: não existe lição número 2</h2>

<p>Cada linguagens já tem um <a href="http://mirnazim.org/writings/python-ecosystem-introduction/">ecosistema</a> e estruturas próprias feitas exatamente
para facilitar sua vida, cabe a você ler as enormes documentações e clicar em seus milhares de links e StackOverflows para descobrir
cada uma delas e como elas funcionam.</p>

<p>Aprender uma nova linguagem é difícil e leva tempo. Lide com isso.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backend X Mobile App: o que fazer o que não fazer e como fazer]]></title>
    <link href="http://rabc.github.com/2011/11/23/backend-x-mobile-app-o-que-fazer-o-que-nao-fazer-e-como-fazer/"/>
    <updated>2011-11-23T21:43:00-02:00</updated>
    <id>http://rabc.github.com/2011/11/23/backend-x-mobile-app-o-que-fazer-o-que-nao-fazer-e-como-fazer</id>
    <content type="html"><![CDATA[<p>Dificilmente um aplicativo mobile (qualquer plataforma, choose one) vive sozinho, 90% das vezes é necessário um back-end para guardar,
transmitir, processar as informações.</p>

<p>A programação nos dois lados não é igual, tanto em arquitetura quanto em padrões. E sofri muito até perceber isso, por isso apresento aqui
os principais problemas, tanto de programação quanto humanos, que os dois lados encontram.</p>

<!-- more -->


<h2>Nunca confie no dev na outra ponta (a menos que ele sente na mesma mesa que você)</h2>

<p>A interface de um aplicativo mobile é, sim, complicada e cheia de detalhes. Esses detalhes, muitas vezes, só são vistos durante o desenvolvimento.</p>

<p>Enquanto isso, as informações no back-end estão, geralmente, dispersas. A forma como elas devem ser reunidas e transmitidas afeta a
arquitetura do projeto.</p>

<p>Isso significa que alterações na forma que a informação deve ser enviada e recebida são inevitáveis nas duas pontas do projeto. É irreal esperar
que somente um dos lados decida como isso será feito, esse tipo de decisão tem e deve ser tomada em conjunto (princípio
<a href="http://en.wikipedia.org/wiki/ACID">ACID</a> se aplica nesse caso, já que os dois lados tem que garantir o que acontecerá com a informação).</p>

<p>Se os dois desenvolvedores estiverem sentados perto um do outro, essas alterações e definições ficarão muito mais claras e fáceis de serem
explicadas até que chegue a um consenso ou ao um meio-termo que fique bom para ambos.</p>

<p>E o tema seguinte exemplifica por que isso é o ideal.</p>

<h2>Reutilização não funciona aqui</h2>

<p>&#8220;Não reinvente a roda&#8221;, eles dizem. Se já existe uma API pronta para acessar as informações que o aplicativo precisa, o dev do back-end
não vai (com razão) criar outro serviço somente para o aplicativo. Afinal a informação já está lá, não?</p>

<p>Não, não está.</p>

<p>A forma como a informação deve ser apresentada em um aplicativo é bem diferente de qualquer outra plataforma. A informação tem que ser menor,
mais direta, mais informativa e, ao mesmo tempo, mais condensada. O aplicativo não deve possuir todas as regras de negócio de um projeto, portanto
o back-end deve trazer as informações do jeito certo e avisar caso tenha algum erro.</p>

<p>Um número que outras plataformas apresentaram de modo inteiro, pode acontecer de no aplicativo precisar ser em string e já tratada. Se isso acontecer,
como o desenvolvedor do back-end resolve? Cria-se uma nova chave somente para essa informação? (sim, fizeram isso comigo)</p>

<h2>A conexão pode ser pior do que o dispositivo diz que é</h2>

<p>Conexão móvel não é a melhor do mundo, lide com isso.</p>

<p>Qualquer atraso na conexão pode gerar erro no retorno, informações inconsistentes com o que foi pedido e lentidão para o usuário.</p>

<p>Isso também significa que a conexão do usuário está sendo utilizada enquanto esses erros são tratados pela plataforma. Conexão sendo utilizada
leva a consumo do limite da banda do usuário e leva a um uso maior da bateria do dispositivo.</p>

<p>Isso nos leva ao próximo item, que é&#8230;</p>

<h2>Mobile, só você sabe o quanto de informação precisa (e pode) transmitir</h2>

<p>Se der para fazer cache, faça. Se der para <a href="http://en.wikipedia.org/wiki/HTTP_ETag">verificar no servidor</a> se o conteúdo é novo, faça.</p>

<p>Os dados do usuário não são infinitos e o seu aplicativo não tem direito a consumir tudo sozinho. E quanto mais informações, mais lento o
aplicativo ficará.</p>

<p>O back-end deve sempre retornar somente o necessário. O back-end retorna um item que o aplicativo não está utilizando? Remova-o. O aplicativo
está enviando informação inútil para o back-end? Não envie. E é justamente por esses motivos que o JSON foi estabelecido e padronizado.
Simples, direto e fácil.</p>

<p>Já vivi situações em que o back-end retornava o JSON dos dados dentro de um pacote SOAP (sim, em XML). E o aplicativo enviava
em SOAP também. E a conexão sofria com a quantidade de informações inúteis. E o aplicativo gastava processamento capturando o JSON dentro de um XML.</p>

<h2>Se é back-end, programe em mobile. Se é mobile, programe em back-end</h2>

<p>Já vivi os dois lados. Separados e juntos.</p>

<p>No <a href="http://bit.ly/school_rating">School Rating</a>, produzi todo o back-end em Python e o aplicativo em Objective-C.</p>

<p>Primeiro, o programador back-end (eu) estruturou todo o banco de dados, chamadas e retornos da API, conforme o que o programador mobile (eu) passou.
Aí o programador mobile (eu) descobriu que precisava de algumas informações a mais. O programador back-end (eu) não gostou por ter que alterar
a lógica para incluir mais dados. Mas o programador mobile (eu) foi legal e passou as informações do melhor jeito possível.</p>

<p>Tudo isso me ajudou a ter uma visão de como os dois lados devem interagir e por que alterações nesse caso são necessárias (e quando elas devem
ser necessárias).</p>

<h2>Tipagem de dados foi inventada por um motivo</h2>

<p>Um array deve sempre ser um array. Uma string sempre uma string. E um número sempre um número.</p>

<p>Quem requisita os dados deve fazer o menor tratamento possível, principalmente quando estamos falando de um sistema mobile
com memória e processamento limitados. Se uma determinada chave do JSON é uma lista (array), então <strong>sempre</strong> retorne uma lista, mesmo que ela
seja vazia, e nunca um valor nulo ou string vazia.</p>

<h2>Use e abuse dos http headers</h2>

<p>Os cabeçalhos de uma requisição HTTP serão sempre tratados automaticamente, não importa o método de requisição utlizado, portanto é mais simples
ler o response code do que perder tempo e processamento interpretando o corpo da resposta. O Level 2 do
<a href="http://martinfowler.com/articles/richardsonMaturityModel.html">Richardson Maturity Model</a> explica bem sobre isso.</p>

<p>Isso vale para as duas pontas da requisição. Um <strong>User-Agent</strong> pode diferenciar quem estão fazendo a requisição (se é um Android
ou um iPhone, por exemplo). Um <strong>MIME</strong> pode <a href="http://blog.steveklabnik.com/2011/08/07/some-people-understand-rest-and-http.html">especificar</a>
o que está sendo enviado.</p>

<h2>Simplifique. Ou morra afogado no mar de informações.</h2>

<p>Tudo o que disse leva a esse ponto: simplificar. Informações sem tratamento são apenas dados, e isso não interessa a quem quer a informação.</p>

<p>Simplifique e seja feliz. Seu usuário agradece.</p>
]]></content>
  </entry>
  
</feed>
